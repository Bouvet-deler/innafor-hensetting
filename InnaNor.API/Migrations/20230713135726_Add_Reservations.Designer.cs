// <auto-generated />
using System;
using InnaNor.API.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InnaNor.API.Migrations
{
    [DbContext(typeof(InnaNorContext))]
    [Migration("20230713135726_Add_Reservations")]
    partial class Add_Reservations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.8");

            modelBuilder.Entity("InnaNor.API.Models.Location", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Area")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Track")
                        .HasColumnType("TEXT");

                    b.Property<string>("TrackNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("TrackResponsible")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("InnaNor.API.Models.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Reserver")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SpaceId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SpaceId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("InnaNor.API.Models.Space", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccessibleByCarKioskResupplyAndService")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly?>("ActiveFrom")
                        .HasColumnType("TEXT");

                    b.Property<string>("BelongsTo")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<string>("Beskrivelse")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeIcing")
                        .HasColumnType("TEXT");

                    b.Property<string>("DieselRefueling")
                        .HasColumnType("TEXT");

                    b.Property<string>("EndEast")
                        .HasColumnType("TEXT");

                    b.Property<string>("EndNorth")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("From")
                        .HasColumnType("TEXT");

                    b.Property<string>("FromSignal")
                        .HasColumnType("TEXT");

                    b.Property<string>("GlobalId")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<string>("GraffitiRemoval")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastChanged")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastChangedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Length")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocationId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ServiceHouseForCleaningSuppliers")
                        .HasColumnType("TEXT");

                    b.Property<string>("ServiceRamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("SewageEmptyingByCar")
                        .HasColumnType("TEXT");

                    b.Property<string>("SewageEmptyingStationary")
                        .HasColumnType("TEXT");

                    b.Property<string>("StartEast")
                        .HasColumnType("TEXT");

                    b.Property<string>("StartNorth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("To")
                        .HasColumnType("TEXT");

                    b.Property<string>("ToSignal")
                        .HasColumnType("TEXT");

                    b.Property<string>("TrackId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TrackPriority")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TrackType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TrackUsageType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("TrainPlacementLength")
                        .HasColumnType("TEXT");

                    b.Property<string>("TrainWashing")
                        .HasColumnType("TEXT");

                    b.Property<string>("WaterFilling")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GlobalId")
                        .IsUnique();

                    b.HasIndex("LocationId");

                    b.ToTable("Spaces");
                });

            modelBuilder.Entity("InnaNor.API.Models.Reservation", b =>
                {
                    b.HasOne("InnaNor.API.Models.Space", "Space")
                        .WithMany()
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Space");
                });

            modelBuilder.Entity("InnaNor.API.Models.Space", b =>
                {
                    b.HasOne("InnaNor.API.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });
#pragma warning restore 612, 618
        }
    }
}
